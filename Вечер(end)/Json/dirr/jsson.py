######################################################################
"""
         ``````````Структура JSON``````````         
"""

# {
#     "firstName": "Jon",
#     "lastName": "Doe",
#     "hobbies": ["walking", "sky diving", "programming"],
#     "age": 35,
#     "children": [
#         {
#             "firstName": "Anna",
#             "age": 6
#         },
#         {
#             "firstName": "Jake",
#             "age": 8
#         }
#     ]
# }

"""
Как видите, JSON поддерживает типы данных, 
такие как строки python и числа, а также вложенные списки и объекты.
"""

######################################################################

"""
Python содержит встроенный модуль под названием json 
для кодирования и декодирования данных JSON.
Просто импортируйте модуль в начале вашего файла:
"""
# import json

"""
          ``````````Небольшой словарь``````````
Как правило, процесс кодирования JSON называется сериализация. 
Этот термин обозначает трансформацию данных в серию байтов 
(следовательно, серийных) для хранения или передачи по сети.

Естественно, десериализация — является противоположным процессом 
декодирования данных, которые хранятся или направлены в стандарт JSON.
"""
######################################################################

"""
          ``````````Сериализация JSON``````````
Что происходит после того, как компьютер обрабатывает большие объемы
информации? Ему нужно принять дамп данных. Соответственно, модуль
json предоставляетметод dump() для записи данных в файлы. Также есть
метод dumps() для записей в строку Python.
"""

"""
Простые объекты Python переводятся в JSON согласно с весьма интуитивной
конверсией.
|------------------------------------|
|        Python    |     Json        |
|------------------------------------|
|    dict          |    object       |
|------------------------------------|
|    list, tuple   |    array        |
|------------------------------------|
|    str           |    string       |
|------------------------------------|
|    int, float    |    number       |
|------------------------------------|
|    True          |    true         |
|------------------------------------|
|    False         |    false        |
|------------------------------------|
|    None          |    null         |
|------------------------------------|
"""

######################################################################

"""
    ``````````Пример сериализации JSON Python``````````
Представьте, что вы работаете с объектом Python в памяти, 
который выглядит следующим образом:
"""

# data = {
#     "president": {
#         "name": "Abraham Linkoln",
#         "country": "USA"
#     }
# }

"""
Сохранить эту информацию на диск — критично, так что ваша задача — записать на файл.

Используя контекстный менеджер Python, вы можете создать файл под названием 
file.json и открыть его в режиме write (файлы JSON имеют расширение .json).
"""

# with open("file.json", "w") as write_file:
#     json.dump(data, write_file)

"""
Обратите внимание на то, что dump() принимает два позиционных 
аргумента: (1) объект данных, который сериализуется и 
(2), файловый объект, в который будут вписаны байты.

Или, если вы склонны продолжать использовать эти сериалзированные 
данные JSON в вашей программе, вы можете работать как со строкой.
"""
# data = {
#     "president": {
#         "name": "Abraham Linkoln",
#         "country": "USA"
#     }
# }

# json_string = json.dumps(data)

"""
Обратите внимание, что файловый объект является пустым, 
так как вы на самом деле не выполняете запись на диск. 
Кроме того, dumps() аналогичен dump().

Обратите внимание: Методы dump() и dumps() пользуются 
одними и теми же аргументами ключевых слов.
"""

######################################################################

"""
Первая опция, которую большинство людей хотят поменять, 
это пробел. Вы можете использовать аргумент indent для 
определения размера отступа вложенных структур.
"""

# data = {
#     "president": {
#         "name": "Abraham Linkoln",
#         "country": "USA"
#     }
# }

# json.dumps(data)
# json.dumps(data, indent=4)

######################################################################

"""
        ``````````Десериализация JSON``````````
Отлично, похоже вам удалось поймать экземпляр дикого JSON! 
Теперь нам нужно предать ему форму. В модуле json вы 
найдете load() и loads() для превращения кодированных данных JSON 
в объекты Python.

Как и сериализация, есть простая таблица конверсии для десериализации, 
так что вы можете иметь представление о том, как все выглядит.
|------------------------------------|
|     Json         |    Python       |
|------------------------------------|
|    object        |    dict         |
|------------------------------------|
|    array         |    list, tuple  |
|------------------------------------|
|    string        |    str          |
|------------------------------------|
|    number        |    int, float   |
|------------------------------------|
|    true          |    True         |
|------------------------------------|
|    false         |    False        |
|------------------------------------|
|    null          |    None         |
|------------------------------------|
Технически, эта конверсия не является идеальной инверсией таблицы сериализации. 
По сути, это значит что если вы кодируете объект сейчас, а затем декодируете 
его в будущем, вы можете не получить тот же объект назад.
"""

"""
В реальности, это как попросить одного друга перевести что-нибудь на японский, 
а потом попросить другого друга перевести это обратно на русский. В любом случае, 
самым простым примером будет кодировать кортеж и получить назад список после 
декодирования, вот так:
"""

# blackjack_hand = (8, "Q")
# encoded_hand = json.dumps(blackjack_hand)
# decoded_hand = json.loads(encoded_hand)
 
# print(blackjack_hand == decoded_hand) # False
 
# print(type(blackjack_hand)) # <class 'tuple'>
# print(type(decoded_hand)) # <class 'list'>
 
# print(blackjack_hand == tuple(decoded_hand)) # True

######################################################################

"""
    ``````````Пример десериализации JSON Python``````````
На этот раз, представьте что у вас есть некие данные, хранящиеся на диске, 
которыми вы хотите манипулировать в памяти. Вам все еще нужно будет 
воспользоваться контекстным менеджером, но на этот раз, вам нужно будет 
открыть существующий file.json в режиме для чтения.
"""

# with open("file.json", "r") as read_file:
#     data = json.load(read_file)

"""
Здесь все достаточно прямолинейно, но помните, что результат этого 
метода может вернуть любые доступные типы данных из таблицы конверсий. 
Это важно только в том случае, если вы загружаете данные, которые 
вы ранее не видели. В большинстве случаев, корневым объектом 
будет dict или list.
"""
######################################################################

"""
Если вы внесли данные JSON из другой программы, или полученную 
каким-либо другим способом строку JSON форматированных данных в Python, 
вы можете легко десериализировать это при помощи loads(), 
который естественно загружается из строки:
"""

# json_string = """
# {
#     "researcher": {
#         "name": "Ford Prefect",
#         "species": "Betelgeusian",
#         "relatives": [
#             {
#                 "name": "Zaphod Beeblebrox",
#                 "species": "Betelgeusian"
#             }
#         ]
#     }
# }
# """
 
# data = json.loads(json_string)

######################################################################
